=== UI Raw Text ===
Test-driven development Test automation, mostly using unit testing, is a key feature of extreme programming and agile software development, where it is known as test-driven development (TDD) or test-first development. Unit tests can be written to define the functionality before the code is written. However, these unit tests evolve and are extended as coding progresses, issues are discovered and the code is subjected to refactoring.[10] Only when all the tests for all the demanded features pass is the code considered complete. Proponents argue that it produces software that is both more reliable and less costly than code that is tested by manual exploration.[citation needed] It is considered more reliable because the code coverage is better, and because it is run constantly during development rather than once at the end of a waterfall development cycle. The developer discovers defects immediately upon making a change, when it is least expensive to fix. Finally, code refactoring is safer when unit testing is used; transforming the code into a simpler form with less code duplication, but equivalent behavior, is much less likely to introduce new defects when the refactored code is covered by unit tests.
=== API Raw Text ===
Test-driven development Test automation, mostly using unit testing, is a key feature of extreme programming and agile software development, where it is known as test-driven development (TDD) or test-first development. Unit tests can be written to define the functionality before the code is written. However, these unit tests evolve and are extended as coding progresses, issues are discovered and the code is subjected to refactoring.[10] Only when all the tests for all the demanded features pass is the code considered complete. Proponents argue that it produces software that is both more reliable and less costly than code that is tested by manual exploration.[citation needed] It is considered more reliable because the code coverage is better, and because it is run constantly during development rather than once at the end of a waterfall development cycle. The developer discovers defects immediately upon making a change, when it is least expensive to fix. Finally, code refactoring is safer when unit testing is used; transforming the code into a simpler form with less code duplication, but equivalent behavior, is much less likely to introduce new defects when the refactored code is covered by unit tests.
=== UI Word Frequencies ===
test: 4
driven: 2
development: 6
automation: 1
mostly: 1
using: 1
unit: 5
testing: 2
is: 15
a: 4
key: 1
feature: 1
of: 2
extreme: 1
programming: 1
and: 5
agile: 1
software: 2
where: 1
it: 5
known: 1
as: 2
tdd: 1
or: 1
first: 1
tests: 4
can: 1
be: 1
written: 2
to: 4
define: 1
the: 11
functionality: 1
before: 1
code: 9
however: 1
these: 1
evolve: 1
are: 2
extended: 1
coding: 1
progresses: 1
issues: 1
discovered: 1
subjected: 1
refactoring: 2
only: 1
when: 4
all: 2
for: 1
demanded: 1
features: 1
pass: 1
considered: 2
complete: 1
proponents: 1
argue: 1
that: 3
produces: 1
both: 1
more: 2
reliable: 2
less: 3
costly: 1
than: 2
tested: 1
by: 2
manual: 1
exploration: 1
because: 2
coverage: 1
better: 1
run: 1
constantly: 1
during: 1
rather: 1
once: 1
at: 1
end: 1
waterfall: 1
cycle: 1
developer: 1
discovers: 1
defects: 2
immediately: 1
upon: 1
making: 1
change: 1
least: 1
expensive: 1
fix: 1
finally: 1
safer: 1
used: 1
transforming: 1
into: 1
simpler: 1
form: 1
with: 1
duplication: 1
but: 1
equivalent: 1
behavior: 1
much: 1
likely: 1
introduce: 1
new: 1
refactored: 1
covered: 1

=== API Word Frequencies ===
test: 4
driven: 2
development: 6
automation: 1
mostly: 1
using: 1
unit: 5
testing: 2
is: 15
a: 4
key: 1
feature: 1
of: 2
extreme: 1
programming: 1
and: 5
agile: 1
software: 2
where: 1
it: 5
known: 1
as: 2
tdd: 1
or: 1
first: 1
tests: 4
can: 1
be: 1
written: 2
to: 4
define: 1
the: 11
functionality: 1
before: 1
code: 9
however: 1
these: 1
evolve: 1
are: 2
extended: 1
coding: 1
progresses: 1
issues: 1
discovered: 1
subjected: 1
refactoring: 2
only: 1
when: 4
all: 2
for: 1
demanded: 1
features: 1
pass: 1
considered: 2
complete: 1
proponents: 1
argue: 1
that: 3
produces: 1
both: 1
more: 2
reliable: 2
less: 3
costly: 1
than: 2
tested: 1
by: 2
manual: 1
exploration: 1
because: 2
coverage: 1
better: 1
run: 1
constantly: 1
during: 1
rather: 1
once: 1
at: 1
end: 1
waterfall: 1
cycle: 1
developer: 1
discovers: 1
defects: 2
immediately: 1
upon: 1
making: 1
change: 1
least: 1
expensive: 1
fix: 1
finally: 1
safer: 1
used: 1
transforming: 1
into: 1
simpler: 1
form: 1
with: 1
duplication: 1
but: 1
equivalent: 1
behavior: 1
much: 1
likely: 1
introduce: 1
new: 1
refactored: 1
covered: 1
